syntax = "proto3";

// TODO: split into multiple files

package mica.rpc;

message JobDescriptor {
    string resource_uri = 1;
}

message RegisterNodeRequest {
    bytes uuid = 1; 
    string hostname = 2;
    // The endpoint of the node manager
    string endpoint = 3;
    // TODO: Add resource descriptions
}

message RegisterNodeResponse {
    enum Status {
        OK = 0;
    }
    Status status = 1;
    string message = 2;
}

message HeartbeatRequest {
    // TODO: Add statistics of the node
    fixed64 epoch = 1; 
}

message HeartbeatResponse {
    // TODO: Use the epoch to gossip a consistent state between RM and NMs
}

//
// RPC services between RM and NM
service ResourceManagerService {
    rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse) {}
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}
}

message DeployJobRequest {
    bytes uuid = 1;
    JobDescriptor job = 2;
}

message DeployJobResponse {
    string message = 1;
}

service NodeManagerService {
    rpc DeployJob(DeployJobRequest) returns (DeployJobResponse) {} 
}

message SubmitJobRequest {
    // The client pick a UUID to make the call of submission idempotent. The design is not necessarily safe but it simplifies the implementation of launching different versions of jobs 
    bytes job_uuid = 1;
    JobDescriptor job = 2;
}

message SubmitJobResponse {
    string message = 1; 
}

message GetJobInfoRequest {
    bytes uuid = 1;
}

message GetJobInfoResponse {
    enum Status {
        NOTFOUND = 0;
        SUBMITTED = 1;
        SCHEDULING = 2;
        RUNNING = 3;
        TERMINATED = 4;
    }
    Status status = 1;
    JobDescriptor job = 2;
}

message DeleteJobRequest {
    bytes uuid = 1;
}

message DeleteJobResponse {
    enum Status {
        OK = 0;
    }
    Status status = 1;
    string message = 2;
}

//
// RPC services between the client and the RM
service JobManagerService {
    rpc SubmitJob(SubmitJobRequest) returns (SubmitJobResponse) {}
    rpc GetJobInfo(GetJobInfoRequest) returns (GetJobInfoResponse) {}
    rpc DeleteJob(DeleteJobRequest) returns (DeleteJobResponse) {}
}
